{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport blogsService from '../services/blogs';\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    like(state, action) {\n      const id = action.payload.id;\n      const blogFind = state.find(n => n.id === id);\n      const likeAdded = { ...blogFind,\n        likes: blogFind.likes + 1\n      };\n      return state.map(blog => blog.id !== id ? blog : likeAdded);\n    },\n\n    appendBlog(state, action) {\n      state.push(action.payload);\n    },\n\n    setBlogs(state, action) {\n      return action.payload;\n    },\n\n    poistaBlog(state, action) {\n      const id = action.payload.id;\n      return state.filter(blog => blog.id !== id);\n    }\n\n  }\n});\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogsService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\nexport const selectAllBlogs = state => state.blogs;\nexport const createBlog = content => {\n  return async dispatch => {\n    const newBlog = await blogsService.create(content);\n    dispatch(appendBlog(newBlog));\n  };\n};\nexport const likeBlog = id => {\n  return async dispatch => {\n    const votable = await blogsService.addLike(id);\n    dispatch(like(votable));\n  };\n};\nexport const deleteBlogi = id => {\n  return async dispatch => {\n    const votable = await blogsService.poista(id);\n    dispatch(poistaBlog(votable));\n    const blogs = await blogsService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\nexport const {\n  setBlogs,\n  like,\n  appendBlog,\n  poistaBlog\n} = blogSlice.actions;\nexport default blogSlice.reducer;","map":{"version":3,"sources":["/Users/jererytkonen/Documents/GitHub/full-stack-open-2022/part7/bloglist/frontend/src/reducers/blogReducer.js"],"names":["createSlice","blogsService","blogSlice","name","initialState","reducers","like","state","action","id","payload","blogFind","find","n","likeAdded","likes","map","blog","appendBlog","push","setBlogs","poistaBlog","filter","initializeBlogs","dispatch","blogs","getAll","selectAllBlogs","createBlog","content","newBlog","create","likeBlog","votable","addLike","deleteBlogi","poista","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAClB,YAAMC,EAAE,GAAGD,MAAM,CAACE,OAAP,CAAeD,EAA1B;AACA,YAAME,QAAQ,GAAGJ,KAAK,CAACK,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,EAAF,KAASA,EAA3B,CAAjB;AACA,YAAMK,SAAS,GAAG,EAChB,GAAGH,QADa;AAEhBI,QAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAAT,GAAiB;AAFR,OAAlB;AAIA,aAAOR,KAAK,CAACS,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACR,EAAL,KAAYA,EAAZ,GAAiBQ,IAAjB,GAAwBH,SAA7C,CAAP;AACD,KATO;;AAURI,IAAAA,UAAU,CAACX,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACY,IAAN,CAAWX,MAAM,CAACE,OAAlB;AACD,KAZO;;AAaRU,IAAAA,QAAQ,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAOA,MAAM,CAACE,OAAd;AACD,KAfO;;AAgBRW,IAAAA,UAAU,CAACd,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAMC,EAAE,GAAGD,MAAM,CAACE,OAAP,CAAeD,EAA1B;AACA,aAAOF,KAAK,CAACe,MAAN,CAAcL,IAAD,IAAUA,IAAI,CAACR,EAAL,KAAYA,EAAnC,CAAP;AACD;;AAnBO;AAHkB,CAAD,CAA7B;AA0BA,OAAO,MAAMc,eAAe,GAAG,MAAM;AACnC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,KAAK,GAAG,MAAMxB,YAAY,CAACyB,MAAb,EAApB;AACAF,IAAAA,QAAQ,CAACJ,QAAQ,CAACK,KAAD,CAAT,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,cAAc,GAAIpB,KAAD,IAAWA,KAAK,CAACkB,KAAxC;AAEP,OAAO,MAAMG,UAAU,GAAIC,OAAD,IAAa;AACrC,SAAO,MAAOL,QAAP,IAAoB;AACzB,UAAMM,OAAO,GAAG,MAAM7B,YAAY,CAAC8B,MAAb,CAAoBF,OAApB,CAAtB;AACAL,IAAAA,QAAQ,CAACN,UAAU,CAACY,OAAD,CAAX,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,QAAQ,GAAIvB,EAAD,IAAQ;AAC9B,SAAO,MAAOe,QAAP,IAAoB;AACzB,UAAMS,OAAO,GAAG,MAAMhC,YAAY,CAACiC,OAAb,CAAqBzB,EAArB,CAAtB;AACAe,IAAAA,QAAQ,CAAClB,IAAI,CAAC2B,OAAD,CAAL,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,WAAW,GAAI1B,EAAD,IAAQ;AACjC,SAAO,MAAOe,QAAP,IAAoB;AACzB,UAAMS,OAAO,GAAG,MAAMhC,YAAY,CAACmC,MAAb,CAAoB3B,EAApB,CAAtB;AACAe,IAAAA,QAAQ,CAACH,UAAU,CAACY,OAAD,CAAX,CAAR;AACA,UAAMR,KAAK,GAAG,MAAMxB,YAAY,CAACyB,MAAb,EAApB;AACAF,IAAAA,QAAQ,CAACJ,QAAQ,CAACK,KAAD,CAAT,CAAR;AACD,GALD;AAMD,CAPM;AASP,OAAO,MAAM;AAAEL,EAAAA,QAAF;AAAYd,EAAAA,IAAZ;AAAkBY,EAAAA,UAAlB;AAA8BG,EAAAA;AAA9B,IAA6CnB,SAAS,CAACmC,OAA7D;AACP,eAAenC,SAAS,CAACoC,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport blogsService from '../services/blogs';\n\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    like(state, action) {\n      const id = action.payload.id;\n      const blogFind = state.find((n) => n.id === id);\n      const likeAdded = {\n        ...blogFind,\n        likes: blogFind.likes + 1\n      };\n      return state.map((blog) => (blog.id !== id ? blog : likeAdded));\n    },\n    appendBlog(state, action) {\n      state.push(action.payload);\n    },\n    setBlogs(state, action) {\n      return action.payload;\n    },\n    poistaBlog(state, action) {\n      const id = action.payload.id;\n      return state.filter((blog) => blog.id !== id);\n    }\n  }\n});\n\nexport const initializeBlogs = () => {\n  return async (dispatch) => {\n    const blogs = await blogsService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\n\nexport const selectAllBlogs = (state) => state.blogs;\n\nexport const createBlog = (content) => {\n  return async (dispatch) => {\n    const newBlog = await blogsService.create(content);\n    dispatch(appendBlog(newBlog));\n  };\n};\n\nexport const likeBlog = (id) => {\n  return async (dispatch) => {\n    const votable = await blogsService.addLike(id);\n    dispatch(like(votable));\n  };\n};\n\nexport const deleteBlogi = (id) => {\n  return async (dispatch) => {\n    const votable = await blogsService.poista(id);\n    dispatch(poistaBlog(votable));\n    const blogs = await blogsService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\n\nexport const { setBlogs, like, appendBlog, poistaBlog } = blogSlice.actions;\nexport default blogSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}